#! /bin/bash

function die()
{
	echo "$1"
	exit 1
}

function usage()
{
	if [ -z "$platform" ]; then
		cat<<EOF
Usage: ucpp setup PLATFORM [options]
  Installs Universal C++ command-line tools.

EOF
	else
		cat<<EOF
Usage: ucpp setup [PLATFORM] [-t <team-number>]
  Installs Universal C++ command-line tools.
  The default platform is: $platform

EOF
	fi

	cat <<EOF
Options
  -h, --help
      Display this help and exit
  -t <team-number>
      Set default team number for deploying code
  -c <path-to-c-drive>
      For the linux-windriver platform ONLY:
        Set the path equivalent to the C:/ drive
        (the parent directory of the WindRiver folder)
        NOTE: requires trailing slash (/)

Available Platforms:
  linux-gccdist
      Set up Linux system that automatically downloads
      the compiler and the latest version of WPILib
      Re-run this command to download WPILib updates

  linux-windriver
      Set up Linux system that relies on an existing
      WindRiver or gccdist install

  windows-cygwin
      Set up a Windows build system that uses Cygwin

  windows-git
      Set up a Windows build system that relies on
      WindRiver and MSYSgit

  windows-git-gccdist
      Set up a Windows build system that relies on
      gccdist and MSYSgit

EOF
}

case `uname` in 
	Linux*)
		platform=linux-gccdist
		C_DRIVE=$HOME/.ucpp/gccdist/
		;;
	windows32|MINGW*)
		if [ -d "${C_DRIVE}WindRiver" ]; then
			platform=windows-git
			C_DRIVE=/c/
		else
			if [ -d "$HOME/.ucpp/gccdist/" ]; then
				:
			else
				echo "WindRiver is not installed"
				echo -n "Do you want to download/install gccdist instead (Y/n)"
				read answer
				if [ "x$answer" = "xN" ] || [ "x$answer" = "xn" ]; then
					die "Setup aborted"
				fi
			fi
			platform=windows-git-gccdist
			C_DRIVE=$HOME/.ucpp/gccdist/
		fi
		;;
	CYGWIN*)
		platform=windows-cygwin
		C_DRIVE=/cygdrive/c/
		;;
esac

case "x$1" in
	"xlinux-windriver")
		platform=linux-windriver
		C_DRIVE=
		shift
		;;
	"xlinux-gccdist")
		platform=linux-gccdist
		C_DRIVE=$HOME/.ucpp/gccdist/
		shift
		;;
	"xwindows-cygwin")
		platform=windows-cygwin
		C_DRIVE=/cygdrive/c/
		shift
		;;
	"xwindows-git")
		platform=windows-git
		C_DRIVE=/c/
		shift
		;;
	"xwindows-git-gccdist")
		platform=windows-git-gccdist
		C_DRIVE=$HOME/.ucpp/gccdist/
		shift
		;;
esac

if [ -z "$platform" ]; then
	usage >&2
	exit 1
fi

while getopts "ht:c:-:" opt; do
	case $opt in
		h)
			usage
			exit
			;;
		t)
			HUNDREDS=`expr $OPTARG / 100`
			UNDER_HUNDREDS=`expr $OPTARG % 100`
			DEPLOY_IP="10.${HUNDREDS}.${UNDER_HUNDREDS}.2"
			[ "x$DEPLOY_IP" = "x10...2" ] && die "Invalid team number"
			;;
		c)
			C_DRIVE=$OPTARG
			;;
		-)
			case $OPTARG in
				help)
					usage
					exit
					;;
				*)
					echo "Invalid option: --$OPTARG" >&2
					usage >&2
					exit 1
					;;
			esac
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			usage >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			usage >&2
			exit 1
			;;
	esac
done

##### Functions #####

function gen_settings()
{
	if [ -f "$HOME/.ucpp/settings" ]; then
		echo -n "UCPP user settings already exist. Overwrite? (y/N)"
		if [ "x$UCPP_SILENT" = "xyes" ]; then
			exit
		elif [ "x$UCPP_FORCE" == "xyes" ]; then
			echo y
		else
			read answer
			if [ "x$answer" = "xY" ] || [ "x$answer" = "xy" ]; then
				:
			else
				exit
			fi
		fi
	fi

	mkdir -p "$HOME/.ucpp"

	cat >"$HOME/.ucpp/settings" <<EOF
#! /bin/bash
#  Also read by GNU make - use only variable defs here

##### Global ucpp settings #####

# Robot IP to deploy code to
export DEPLOY_IP=$DEPLOY_IP

# The location of the C:/ drive
#  Under dual-boot Linux/Windows systems, set to the location of the
#  C:/ drive under Linux (e.g. /media/sda2/)
#  In Cygwin, the C:/ drive is /cygdrive/c/
#  Under MSYS, the C:/ drive is /c/
#  If using gccdist, set C_DRIVE to the gccdist directory
#  Otherwise, just set to "C:/"
export C_DRIVE="$C_DRIVE"
EOF

	cat >>"$HOME/.ucpp/settings" <<'EOF'

export WIND_HOME="${C_DRIVE}WindRiver"
export WIND_BASE="$WIND_HOME/vxworks-6.3"
export WIND_LIC_PROXY="$WIND_HOME/setup/x86-win32/bin/"
export LM_LICENSE_FILE="$WIND_HOME/license/zwrsLicense.lic"
export COMPILER_DIR="$WIND_HOME/gnu/3.4.4-vxworks-6.3/x86-win32/bin"



# Default configure method for "ucpp configure"
#   Possible values: py, winpy, wr, help
# If left blank, a help message will be shown
EOF
}

function install_gccdist()
{
	if echo "$C_DRIVE" | grep ' ' >/dev/null; then
		cat<<EOF

ERROR: gccdist cannot be installed in a path with spaces!

The specified gccdist install directory is:
    $C_DRIVE
Please specify a different gccdist path using the -c option.
For example: ucpp setup -c "/c/Robotics/gccdist/"

IMPORTANT: the argument to -c must end with a trailing slash (/)

EOF
		die "Setup aborted"
	fi

	mkdir -p "$C_DRIVE"
	cd "$C_DRIVE"
	cd ..

	if [ -f gccdist.zip ]; then
		echo "-----> gccdist already downloaded"
	else
		echo "-----> gccdist download ..."
		curl ftp://ftp.ni.com/pub/devzone/tut/updated_vxworks63gccdist.zip -o gccdist.zip
		echo "-----> gccdist download [DONE]"
	fi

	if [ -d gccdist/WindRiver ]; then
		echo "-----> gccdist already installed"
	else
		echo "-----> gccdist install ..."
		unzip -oqq gccdist.zip -d .
		mkdir -p gccdist/WindRiver/license
		cp gccdist/supp/zwrsLicense.lic gccdist/WindRiver/license/zwrsLicense.lic
		echo "-----> gccdist install [DONE]"
	fi
}

function install_wpilib()
{
	mkdir -p "$C_DRIVE"
	cd "$C_DRIVE"
	cd ..

	[ -d gccdist ] || die "Cannot install WPILib: gccdist not found"

	echo -n "-----> Checking for WPILib updates... "
	curl -s http://firstforge.wpi.edu/sf/frs/do/viewSummary/projects.wpilib/frs | grep '2013 FRC Update for C++' | sed "s/.*<a href=\"\([^\"]*\)\">.*/http:\/\/firstforge.wpi.edu\1/" | uniq | sed "s/;.*//" > wpilib_page1.url
	curl -s `cat wpilib_page1.url` | grep "rel[0-9][0-9]*" | grep href | sed "s/.*\(rel[0-9]*\)/\1/" | sort | tail -n 1 | sed "s/.*<a href=\"\([^\"]*\).*/http:\/\/firstforge.wpi.edu\1/" | sed "s/;.*//" > wpilib_page2.url
	curl -s `cat wpilib_page2.url` | grep "\.exe\s*<\/a>" | sed "s/.*<a href=\"\([^\"]*\)\".*/http:\/\/firstforge.wpi.edu\1/" | sed "s/;.*//" > wpilib_page3.url

	touch wpilib_last_downloaded.url
	if [ "x`cat wpilib_page3.url`" == "x`cat wpilib_last_downloaded.url`" ]; then
		echo "no new updates"
	else
		echo "updates available"
		echo "-----> WPILib download ..."
		curl `cat wpilib_page3.url` -o wpilibupdate.exe
		mv wpilib_page3.url wpilib_last_downloaded.url
		echo "-----> WPILib download [DONE]"
	fi

	touch wpilib_last_installed.url
	if [ "x`cat wpilib_last_downloaded.url`" == "x`cat wpilib_last_installed.url`" ]; then
		echo "-----> WPILib already installed"
	else
		echo "-----> WPILib install ..."
		cd gccdist/WindRiver
		echo "A" | unzip ../../wpilibupdate.exe > unziplog.txt 2>/dev/null
		cd ../../
		rm -f wpilib_page1.url wpilib_page2.url wpilib_page3.url
		cp wpilib_last_downloaded.url wpilib_last_installed.url
		echo "-----> WPILib install [DONE]"
	fi

	if [ "$platform" = "linux-gccdist" ]; then
		rm -f demo
		ln -s gccdist/WindRiver/vxworks-6.3/target/src/demo demo
	else
		rm -rf demo
		cp -r gccdist/WindRiver/vxworks-6.3/target/src/demo demo
	fi
}

function gnu_find_python2_settings()
{
#find python major version 2
    echo "-----> Detecting python ..."
	if command -v python >/dev/null; then
		UCPP_PYTHON_MAJOR_VERSION=$( python --version 2>&1 | \
			sed "s/Python \([0-9]\+\).*/\1/" )

		if [ "$UCPP_PYTHON_MAJOR_VERSION" = "2" ]; then
			UCPP_PYTHON_BIN=`which python`
		elif [ "x`which python2`" != "x" ]; then
			UCPP_PYTHON_BIN=`which python2`
		elif [ "x`which python2.7`" != "x" ]; then
			UCPP_PYTHON_BIN=`which python2.7`
		elif [ "x`which python2.6`" != "x" ]; then
			UCPP_PYTHON_BIN=`which python2.6`
		fi
	fi

    if [ -z "x$UCPP_PYTHON_BIN" ]; then
        echo "Python 2.x not found"
	    echo "Install python 2 or add it to system PATH"
	    echo "ucpp-setup FAILED"
	    exit 1
    fi

    echo "-----> Python 2 found at: ${UCPP_PYTHON_BIN} [DONE]"
}

function ms_windows_find_python2_dir()
{
    echo "-----> Detecting python ..."
	if [ -z "$1" ]; then
		ROOT="${C_DRIVE}"
	else
		ROOT="$1"
	fi

	if which python2 >/dev/null; then
		UCPP_PYTHON_DIR=$(dirname "`which python2`" | sed "s|[Cc]:/|$C_DRIVE|g")
	else
		if which "${ROOT}Python27/python.exe" >/dev/null; then
			UCPP_PYTHON_DIR="${ROOT}Python27"
		else
			echo "Python not found"
			echo "Install python or add it to system PATH"
			echo "ucpp-setup FAILED"
			exit 1
		fi
	fi

	UCPP_PYTHON_BIN="${UCPP_PYTHON_DIR}/python.exe"

    echo "-----> Python 2 found at: ${UCPP_PYTHON_BIN} [DONE]"
}

function ms_windows_find_windriver_bin()
{
	if [ -d "${C_DRIVE}WindRiver/workbench-3.0/x86-win32/bin" ]; then
		UCPP_WIND_BIN="${C_DRIVE}WindRiver/workbench-3.0/x86-win32/bin"
	else
		UCPP_WIND_BIN="${C_DRIVE}WindRiver/workbench-2.5/x86-win32/bin"
	fi
	OLD_PATH="$PATH"
	export PATH="$PATH:$UCPP_WIND_BIN"
}

##### Main #####
if [ -z "$DEPLOY_IP" ]; then
	if [ -f "$HOME/.ucpp/settings" ] && cat "$HOME/.ucpp/settings" | grep DEPLOY_IP | cut -d '=' -f 2 | grep 10 >/dev/null; then
		DEPLOY_IP=$(cat "$HOME/.ucpp/settings" | grep DEPLOY_IP | cut -d '=' -f 2)
	else
		echo "Warning: Default team number was not specified"
	fi
fi

case "$platform" in
	linux-windriver)
		if [ -z "$C_DRIVE" ]; then
			echo "Please specify path to C:/ drive"
			exit 1
		fi

		gen_settings
		gnu_find_python2_settings
		cat >>"$HOME/.ucpp/settings" <<EOF
DEFAULT_CONFIGURE_COMMAND=py
UCPP_PYTHON_BIN="${UCPP_PYTHON_BIN}"
EOF
		;;
	linux-gccdist)
		gen_settings
		gnu_find_python2_settings
		cat >>"$HOME/.ucpp/settings" <<EOF
DEFAULT_CONFIGURE_COMMAND=py
UCPP_PYTHON_BIN="${UCPP_PYTHON_BIN}"
EOF
		install_gccdist
		install_wpilib
		;;
	windows-cygwin)
		[ -d "${C_DRIVE}WindRiver/" ] || die "ERROR: ucpp on Windows currently requires a copy of WindRiver"
		gen_settings
		gnu_find_python2_settings
		cat >>"$HOME/.ucpp/settings" <<EOF
DEFAULT_CONFIGURE_COMMAND=winpy
UCPP_PYTHON_BIN="${UCPP_PYTHON_BIN}"
EOF
		;;
	windows-git)
		[ -d "${C_DRIVE}WindRiver/" ] || die "ERROR: ucpp on Windows currently requires a copy of WindRiver"
		gen_settings
		ms_windows_find_windriver_bin
		ms_windows_find_python2_dir
		cat >>"$HOME/.ucpp/settings" <<EOF
export UCPP_PYTHON_DIR="$UCPP_PYTHON_DIR"
export UCPP_WIND_BIN="$UCPP_WIND_BIN"
EOF

		cat >>"$HOME/.ucpp/settings" <<'EOF'
DEFAULT_CONFIGURE_COMMAND=winpy
UCPP_PYTHON_BIN="${UCPP_PYTHON_DIR}/python.exe"
# Use the WindRiver verion of all unix commands
export OLD_PATH="$PATH"
export PATH="$UCPP_WIND_BIN:$UCPP_PYTHON_DIR"
EOF

		export PATH="$OLD_PATH"
		if [ "x`which make`" = "x" ]; then
			echo "Some unix commands are missing"
			echo -n "Add WindRiver commands to PATH via appending to .bashrc? (Y/n)"
			read answer

			if [ "x$answer" = "xN" ] || [ "x$answer" = "xn" ]; then
				:
			else
				echo 'export PATH="$PATH:COMMANDS_DIR"' | \
					sed -e "s|COMMANDS_DIR|$UCPP_WIND_BIN|" >> ~/.bashrc
			echo ".bashrc updated; restart command prompt for changes to take effect"
			fi
		fi
		;;
	windows-git-gccdist)
		gen_settings
		install_gccdist
		ms_windows_find_windriver_bin
		ms_windows_find_python2_dir /c/
		cat >>"$HOME/.ucpp/settings" <<EOF
export UCPP_PYTHON_DIR="$UCPP_PYTHON_DIR"
export UCPP_WIND_BIN="$UCPP_WIND_BIN"
EOF

		cat >>"$HOME/.ucpp/settings" <<'EOF'
DEFAULT_CONFIGURE_COMMAND=winpy
UCPP_PYTHON_BIN="${UCPP_PYTHON_DIR}/python.exe"
export PATH="$PATH:$UCPP_WIND_BIN:$UCPP_PYTHON_DIR"
EOF
		install_wpilib

		export PATH="$OLD_PATH"
		if [ "x`which make`" = "x" ]; then
			echo "Some unix commands are missing"
			echo -n "Add WindRiver commands to PATH via appending to .bashrc? (Y/n)"
			read answer

			if [ "x$answer" = "xN" ] || [ "x$answer" = "xn" ]; then
				:
			else
				echo 'export PATH="$PATH:COMMANDS_DIR"' | \
					sed -e "s|COMMANDS_DIR|$UCPP_WIND_BIN|" >> ~/.bashrc
			echo ".bashrc updated; restart command prompt for changes to take effect"
			fi
		fi
		;;
esac

cat <<EOF

UCPP setup successful
  Platform                $platform
EOF

if [ -n "$DEPLOY_IP" ]; then
	echo "  Code deployment IP      $DEPLOY_IP"
fi

if [ "$platform" = "linux-gccdist" ] || [ "$platform" = "windows-git-gccdist" ]; then
	echo -n "  WPILib version          "
	cat gccdist/WindRiver/unziplog.txt | grep "inflating: WPILib/WPILibC++.*\.zip" | sed "s/.*\(WPILib\/.*\.zip\).*/\1/"
	echo "  Example code can be found in ~/.ucpp/demo/"
fi

