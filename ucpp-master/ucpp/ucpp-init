#! /bin/bash

function die()
{
	echo "$1"
	exit 1
}

function usage()
{
	cat <<EOF
Usage: ucpp init [options]
Options:
    -h, --help
        Show this message
    -t <team-number>
        Set up deploy/undeploy targets for this team's robot
EOF
}

source ucpp_settings

while getopts "ht:-:" opt; do
	case $opt in
		h)
			usage
			exit
			;;
		t)
			HUNDREDS=`expr $OPTARG / 100`
			UNDER_HUNDREDS=`expr $OPTARG % 100`
			DEPLOY_IP="10.${HUNDREDS}.${UNDER_HUNDREDS}.2"
			[ "x$DEPLOY_IP" = "x10...2" ] && die "Invalid team number"
			;;
		-)
			case $OPTARG in
				help)
					usage
					exit
					;;
				*)
					echo "Invalid option: --$OPTARG" >&2
					usage >&2
					exit 1
					;;
			esac
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			usage >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			usage >&2
			exit 1
			;;
	esac
done

if [ -f .ucpp ]; then
	echo "Project already exists in `pwd`"
	echo -n "Overwrite? All customizations will be lost. (y/N)"
	if [ "x$UCPP_SILENT" = "xyes" ]; then
		exit
	elif [ "x$UCPP_FORCE" == "xyes" ]; then
		echo y
	else
		read answer
		if [ "x$answer" = "xY" ] || [ "x$answer" = "xy" ]; then
			:
		else
			exit 1
		fi
	fi
fi

export CPP_PROJECT_WS_ROOT_DIR=$(dirname "`pwd`"| sed "s|$C_DRIVE|C:/|g")
export CPP_PROJECT_ROOT_DIR=$(pwd | sed "s|$C_DRIVE|C:/|g")
export CPP_PROJECT_NAME=$(basename "`pwd`")

# Project settings (for ucpp-configure)

cat <<EOF >.ucpp
#! /bin/bash

##### Project-specific ucpp settings #####

# Workspace root directory
export CPP_PROJECT_WS_ROOT_DIR="$CPP_PROJECT_WS_ROOT_DIR"

# Project name
export CPP_PROJECT_NAME="$CPP_PROJECT_NAME"

# Project root directory
export CPP_PROJECT_ROOT_DIR="$CPP_PROJECT_ROOT_DIR"
EOF

if [ -n "$DEPLOY_IP" ]; then
	cat <<EOF >>.ucpp
# IP to deploy robot code
export DEPLOY_IP=$DEPLOY_IP
EOF
fi

cat <<EOF >>.ucpp
# Default configure method for "ucpp configure"
#   Possible values: py, winpy, wr
# Comment out to use global settings
# Leave blank to print a help message
#DEFAULT_CONFIGURE_COMMAND=

export HAVE_CPP_PROJECT=yes

EOF

# If there is no .wrmakefile, create one

if [ ! -f .wrmakefile ]; then
	cp "$SCRIPT_INSTALL_DIR/.wrmakefile" .
fi

# Create a default Makefile here

cat >Makefile <<'EOF'
#UCPP makefile

# Default target
all: force
	cd PPC603gnu && exec "$(MAKE)" -f Makefile_linux

# Don't do anything for the "Makefile" target
Makefile: ;

# Recursively run all other targets
%: force
	cd PPC603gnu && exec "$(MAKE)" -f Makefile_linux "$*"

force: ;

EOF

# Create a PPC603gnu directory, if needed
mkdir -p PPC603gnu

# On Windows, don't use the Linux Makefile
case `uname` in
	windows32|MINGW*)
		mv Makefile PPC603gnu/Makefile_tmp
		cat PPC603gnu/Makefile_tmp | sed -e "s/Makefile_linux/Makefile/g" > Makefile
		rm PPC603gnu/Makefile_tmp
		;;
	CYGWIN*)
		mv Makefile PPC603gnu/Makefile_tmp
		cat PPC603gnu/Makefile_tmp | sed -e "s/Makefile_linux/Makefile/g" |\
		sed -e 's/$(MAKE)/MAKE_CMD/' |\
		sed -e "s|MAKE_CMD|$WIND_HOME/workbench-3.0/x86-win32/bin/make.exe|"> Makefile
		rm PPC603gnu/Makefile_tmp
		;;
esac

# User diagnostics

cat <<EOF
Initialized UCPP project "$CPP_PROJECT_NAME"
  Project root directory  $CPP_PROJECT_ROOT_DIR
  Workspace directory     $CPP_PROJECT_WS_ROOT_DIR
EOF

if [ -n "$DEPLOY_IP" ]; then
	echo "  Code deployment IP      $DEPLOY_IP"
fi
